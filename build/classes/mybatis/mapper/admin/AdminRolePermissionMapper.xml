<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
【角色权限表】对象关系映射 配置 
 @author AutoCode 309444359@qq.com
 @date 2016-08
 -->
<!-- namespace必须指向Dao接口 -->
<mapper namespace="com.bluemobi.dao.admin.AdminRolePermissionDao">

	<resultMap id="adminRolePermissionResultMap" type="com.bluemobi.po.admin.AdminRolePermission">
		<id property="id" column="id" />
       <result property="roleId" column="role_id" />
       <result property="permissionId" column="permission_id" />
	</resultMap>
	<resultMap id="mapResultMap"  type="java.util.HashMap" extends="adminRolePermissionResultMap"></resultMap>
	<resultMap id="pageResultMap"  type="java.util.HashMap" extends="adminRolePermissionResultMap"></resultMap>
	

    <resultMap id="adminMenuPermissionTOResultMap" type="com.bluemobi.to.admin.AdminMenuPermissionTO">
        <result property="secondMenuName" column="second_menu_name" />
        
        <collection property="adminPermissionTOs" javaType="list" ofType="com.bluemobi.to.admin.AdminPermissionTO">
            <result property="permissionId" column="permission_id" />
            <result property="permissionName" column="permission_name" />
            <result property="hasPermission" column="has_permission" />
        </collection>
    </resultMap>
    
    
	<insert id="insert" parameterType="com.bluemobi.po.admin.AdminRolePermission" useGeneratedKeys="true" keyProperty="id" >
	   insert into admin_role_permission (
	     id,
	     role_id,
	     permission_id
	   )values (
	     #{id},
	     #{roleId},
	     #{permissionId}
	   )
	</insert>

	<update id="update" parameterType="com.bluemobi.po.admin.AdminRolePermission">
		update admin_role_permission
		<set>
			<if test="id != null">
				id=#{id},
			</if>
			<if test="roleId != null">
				role_id=#{roleId},
			</if>
			<if test="permissionId != null">
				permission_id=#{permissionId},
			</if>
		</set>
		<where>
			id=#{id} 
		</where>
	</update>

	<delete id="delete" parameterType="map">
	   delete from 
	     admin_role_permission 
	   <where>
	     <if test="id != null">
	        id=#{id}
	     </if>
	     <if test="roleId != null">
	        and role_id=#{roleId}
	     </if>
	     <if test="permissionId != null">
	        and permission_id=#{permissionId}
	     </if>
	   </where>
	</delete>

	<select id="selectObject" parameterType="map" resultMap="adminRolePermissionResultMap">
	   select 
	    id,
	    role_id,
	    permission_id
	   from admin_role_permission
	   where 
	    id=#{id} 
	</select>
	
	<select id="selectObjectList" parameterType="map" resultMap="adminRolePermissionResultMap">
	   select 
	     id,
	     role_id,
	     permission_id
	   from admin_role_permission
	   <where>
	     <if test="id != null">
	        id=#{id}
	     </if>
	     <if test="roleId != null">
	        and role_id=#{roleId}
	     </if>
	     <if test="permissionId != null">
	        and permission_id=#{permissionId}
	     </if>
	   </where>
	</select>

	<select id="selectMap" parameterType="map" resultMap="mapResultMap">
	   select 
	    id,
	    role_id,
	    permission_id
	   from admin_role_permission
	   where 
	    id=#{id} 
	</select>

	<select id="selectMapList" parameterType="map" resultMap="mapResultMap">
	   select 
	     id,
	     role_id,
	     permission_id
	   from admin_role_permission
	   <where>
	     <if test="id != null">
	        id=#{id}
	     </if>
	     <if test="roleId != null">
	        and role_id=#{roleId}
	     </if>
	     <if test="permissionId != null">
	        and permission_id=#{permissionId}
	     </if>
	   </where>
	</select>
	
	<select id="page" parameterType="map" resultMap="pageResultMap">
	   select 
	     id,
	     role_id,
	     permission_id
	<include refid="pageCondition" />
	limit #{offset},#{rows}
	</select>

	<select id="pageCount" parameterType="map" resultType="int">
	   select count(1)
	   <include refid="pageCondition" />
	</select>

	<sql id="pageCondition">
	   from admin_role_permission
	   <where>
	     <if test="id != null">
	        id=#{id}
	     </if>
	     <if test="roleId != null">
	        and role_id=#{roleId}
	     </if>
	     <if test="permissionId != null">
	        and permission_id=#{permissionId}
	     </if>
	   </where>
	</sql>

	<select id="selectAdminMenuPermissionTOList" parameterType="map" resultMap="adminMenuPermissionTOResultMap">
		select
			sm.name second_menu_name,
			p.permission_id,
			p.name permission_name,
			if(rp.permission_id is null,0,1) has_permission
		from admin_permission p
      		inner join admin_menu sm on p.menu_id = sm.menu_id and sm.pid = #{menuId}
			left join admin_role_permission rp on p.permission_id = rp.permission_id and rp.role_id=#{roleId}
			order by sm.sort_order, p.sort_order
	</select>
	
</mapper> 